#!/usr/bin/env python3

"""
imdb-api - get IMDb info
License: BSD 3-Clause
Copyright (c) 2020, Mauro <mauro@sdf.org>
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

__author__ = "Mauro L."
__version__ = "0.0.1"
__license__ = "BSD3"

import json
import argparse
import urllib.request
from random import choice
from html.parser import HTMLParser


def choose_user_agent():
    ua = [
        "Mozilla/5.0 (Mobile; rv:26.0) Gecko/26.0 Firefox/26.0",
        "Mozilla/5.0 (Tablet; rv:26.0) Gecko/26.0 Firefox/26.0",
        "Mozilla/5.0 (TV; rv:44.0) Gecko/44.0 Firefox/44.0",
        "Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20100101 Firefox/10.0",
        "Mozilla/5.0 (Windows NT x.y; Win64; x64; rv:10.0) Gecko/20100101 Firefox/10.0",
    ]

    return choice(ua)


class IMDb(HTMLParser):
    TAG = "script"
    ATTRS = [('type', 'application/ld+json')]
    FOUND = False
    ONLY_POSTER_URL = False

    def _url_for(self, imdb_id):
        base = "https://www.imdb.com"
        _type = ""
        # Movies
        if imdb_id.startswith("tt"):
            _type = "title"
        # Videos
        if imdb_id.startswith("vi"):
            _type = "video/imdb"
        # Organization, Companies
        if imdb_id.startswith("co"):
            _type = "company"
        # Person
        if imdb_id.startswith("nm"):
            _type = "name"

        assert len(_type), "Wrong IMDb ID?"
        return f"{base}/{_type}/{imdb_id}"

    def GET(self, imdb_id, only_poster_url=False):
        "HTTP(s) GET Requests"

        self.ONLY_POSTER_URL = only_poster_url

        content = ""
        url = self._url_for(imdb_id)
        request = urllib.request.Request(url)
        request.add_header("Pragma", "no-cache")
        request.add_header("User-Agent", choose_user_agent())
        with urllib.request.urlopen(request) as response:
            if response.status == 200:
                content = response.read().decode("utf-8")

            return self.feed(content)

    def handle_starttag(self, tag, attrs):
        if tag == self.TAG and attrs == self.ATTRS:
            self.FOUND = True

    def handle_endtag(self, tag):
        if tag == self.TAG and self.FOUND:
            self.FOUND = False

    def handle_data(self, data):
        if self.FOUND:
            if self.ONLY_POSTER_URL:
                data = json.loads(data)
                data = data.get("image")

            print (data)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("imdb_id", type=str, nargs="?", default="", help="IMDb ID.")
    parser.add_argument(
        "-p",
        "--only-poster-url",
        action="store_true",
        help="GET just the Movie Poster URL."
    )
    args = parser.parse_args()

    if args.imdb_id:
        api = IMDb()
        api.GET(args.imdb_id, args.only_poster_url)

    else:
        parser.print_help()
